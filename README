Σπυρίδων Κάντας sdi1800059

SYSTEM PROGRAMMING 3


monitorproc:
	
	Βάζει όλα τα arguments που χρειάζεται το monitorServer για να ξεκινήσει σε μία λίστα args
	και τα paths με μία for() και κάνει fork() το process.


travelMonitorClient:
	
	Το paths αποθηκεύει τα paths των αρχείων προς διάβασμα του κάθε monitor και το counts
	το πόσα path έχει το κάθε monitor. To travelMonitor μοιράζει τα αρχεία κυκλικά στα παιδιά
	με το index i που μηδενίζει κάθε φορά που φτάνει στο τελευταίο παιδί και το index k το οποίο
	αυξάνεται κατά 1 και δείχνει στην θέση που θα μπεί το νέο path (path[i][k], πχ στον πρώτο κύκλο
	το νέο path μπαίνει στην θέση k=0 σε όλα τα path[i] μετά k=1 και συνεχίζει).
	
	Το ports αποθηκεύει τα ports προς σύνδεση (διαδοχικοί αριθμοί του PORTNUM). Η σύνδεση γίνεται ως
	εξής: Για κάθε παιδί ανοίγει δύο socket για read και για write, βρίσκει το hostname με την
	gethostname() και έπειτα με την gethostbyname() βρίσκει το address και συμπληρώνει το struct sockaddr.
	Τέλος προσπαθεί να συνδεθεί μέχρι επιτυχίας για κάθε socket (καθώς οι server ενδεχομένως να ανοίξουν μετά).
	
	
monitorServer:
	
	Διαβάζει όλα τα paths σε έναν πίνακα path που στο τέλος τον κάνει NULL terminate. Ανοίγει server παίρνοντας
	address με ίδιο τρόπο όπως και το parent process, κάνει bind, listen και accept δύο συνδέσεων από το parent.
	Τέλος κάνει nonblocking τα sockets με την fcntl().
	
	Με την thread_sharing() δημιουργεί numThreads threads που τρέχουν την thread_f(). Το main thread βάζει στον
	cyclicBuffer τα paths κυκλικά με το index k και κάθε φορά που τοποθετεί ένα αυξάνει το cyclicBufferCount και
	μειώνοντας το pathCount(συνολικά paths που απομένουν). Πριν κάνει οτιδήποτε περιμένει να κλειδώσει το mutex mtx.
	Αν είναι γεμάτο το cyclicBuffer καλεί την pthread_cond_wait() ξεκλειδώνοντας έτσι το mtx και περιμένοντας σήμα οτι
	πήρε κάποιο thread.
	
	Τα thread κλειδώνουν δύο mutex πριν δουλέψουν, το mtx για την σχέση τους με το main thread και το tmtx για τα threads
	μεταξύ τους. Έπειτα το thread διαβάζει το πόσα paths μένουν ακόμα(pathCount) και το πόσα paths είναι μέσα στον
	cyclicBuffer(cyclicBufferCount). Αν είναι 0 και τα δύο τότε σημαίνει πως το thread δεν έχει τι να πάρει και κάνει
	exit αλλιώς αν είναι το cyclicBufferCount 0 τότε περιμένει σήμα, ξεκλειδώνοντας το mtx, για να βάλει το main thread.
	Όταν το thread μπορεί να πάρει παίρνει αυτό που δείχνει ο idx που ξεκινάει από το 0 και είναι κυκλικός δείκτης για το
	cyclicBuffer, τον αυξάνει κατά 1 και μειώνει το cyclicBufferCount.
	
	
